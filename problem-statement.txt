You can submit either a text file, or a .odt/.docx/.pdf file. For each case, submit

    a query
    the chosen plan
    your reasoning behind constructing the query (briefly)

    Create a selection query whose chosen plan is a file scan.
    Create a selection query whose chosen plan uses a bit-map index scan.  You can create indices on appropriate relation attributes to create such a case. 
    Create a selection query whose chosen plan is an index scan followed by a filter operation (NOTE: in the plan printed by PostgreSQL, the filter is shown below the index condition, but it is actually executed after the index lookup.)
    Create a query where PostgreSQL chooses a (plain) index nested loops join 
    (NOTE: the nested loops operator has 2 children.  The first child is the outer input, and it may have an index scan or anything else, that is irrelevant.  The second child must have an index scan or bitmap index scan, using an attribute from the first child.)
    Create a query where PostgreSQL chooses a merge join (hint: use an order by clause)
    Add a LIMIT 10 ROWS clause at the end of the previous query, and see what algorithm method is used.   (LIMIT n ensures only n rows are output.) Explain what happened, if the join algorithm changes; if the plan does not change, create a different query where the join algorithm changes as a result of adding the LIMIT clause.
    Create an index as below, and see the time taken:
         create index i1 on takes(id, semester, year);
     Similarly see how long it takes to drop the above index using:
         drop index i1;
    PostgreSQL does not create indexes on foreign key columns by default.  See the effect of having/not having such an index by measuring the execution time of a deletion query. To do so execute the following:
        begin;
            The above is important since you want to roll back the deletion later, to avoid reloading the database!
        Now run  
           explain analyze delete from course where course_id = '400';
        and find the time it takes.   Record this time.
        Note that PostgreSQL does not explain how it checks for foreign key constraint violation.
        Finally run  rollback;  to restore the database state
        Next add indices on all foreign keys; for our purpose these will do: (1) all foreign keys that reference course_id directly and (b) on foreign keys that reference these relations (transitively!).  For your convenience, these are listed below.
            section (course_id), prereq (course_id), prereq(prereq_id)  
            teaches(course_id, sec_id, semester, year)
            takes(course_id, sec_id, semester, year)
        And now measure the time it takes for the same delete as above, using the same 3 steps you used earlier.
        Submit the timings along with an explanation of the results you observe.